题--->
    ① 找到暴力递归的写法(尝试出)
    ② 如果有重复解--->往动态规划变形
    ③ 如果可变参数(不讲究组织)，只是存到缓存 ---> 记忆化搜索(依然在递归)
    ④ 如果精细化组织 ---> 经典的动态规划

什么暴力递归可以继续优化？
    ① 有重复调用同一个子问题的解，这种递归可以优化
    ② 如果每一个子问题都是不同的解，无法优化也不用优化


暴力递归和动态规划的关系
    ① 某一个暴力递归，有解的重复调用，就可以把这个暴力递归优化成动态规划
    ② 任何动态规划问题，都一定对应着某一个有解的重复调用的暴力递归
    ③ 但不是所有暴力递归，都一定对应着动态规划

如何找到某个问题的动态规划方式？
    ① 设计暴力递归：重要原则 + 4种常见尝试模型！重点！
    ② 分析有没有重复解：套路解决
    ③ 用记忆化搜索 -> 用严格表结构实现动态规划：套路解决
    ④ 看看能否继续优化：套路解决

面试中设计暴力递归过程的原则
    ① 每一个可变参数的类型，一定不要比int类型更加复杂
    ② 原则①可以违反，让类型突破到一维线性结构，那必须是唯一可变参数
    ③ 如果发现原则①被违反，但不违反原则②，只需要做记忆化搜索即可
    ④ 可变参数的个数，能少则少

暴力递归过程常见的4种尝试模型
    ① 从左往右的尝试模型         背包问题、 数字对应字母转换
    ② 范围上的尝试模型          纸牌问题
    ③ 多样本位置全对应的尝试模型
    ④ 寻找业务限制的尝试模型

暴力递归到动态规划的套路？
    ① 你已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用
    ② 找到哪些参数的变化会影响返回值，对每一个列出变化范围
    ③ 参数间所有的组合数量，意味着表大小
    ④ 记忆化搜索的方法就是傻缓存，非常容易得到
    ⑤ 规定好严格表的大小，分析位置的依赖顺序，然后从基础填写到最终解
    ⑥ 对于有枚举行为的決策过程，进一步优化